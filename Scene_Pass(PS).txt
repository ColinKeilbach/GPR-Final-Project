#version 400

//This is the Scene Pass Fragment Shader (Pixel Shader)

#ifdef GL_ES
precision highp float; // If GLSL ES is detected, add required precision setting.
#endif // GL_ES

layout (location = 0) out vec4 rtFragColor;

uniform vec2 uResolution;
uniform float time;
uniform sampler2D uNoise;
uniform bool flameColor;
uniform vec4 pressed;

in vec2 vTexCoord;
in vec4 vPosClip;

in vec4 vNormal;
in vec4 vLightDirection[10];
in float vIntensity[10];
in vec4 vPosition;
in vec2 vTexcoord;

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
// Credit to Daniel Buckstein 2020 for providing starter code.
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector
// Credit to Daniel Buckstein 2020 for providing starter code.
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
// Credit to Daniel Buckstein 2020 for providing starter code.
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
// Credit to Daniel Buckstein 2020 for providing starter code.
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

//Returns the length^2 of a vector
float lenSq(vec2 x)
{
    return dot(x, x);
}

float lenSq(vec3 x)
{
    return dot(x, x);
}

//sSphere: Define a sphere and what it entails
//	center: Center of sphere as a point on the screen
//	radius: Radius of the sphere
//  color: Color of the sphere
struct sSphere
{
    vec4 center;
    float radius;
    vec4 color;
};

const int maxSpheres = 100; //Max number of spheres
int numSpheres; //Number of current spheres
vec4 sphereColor[maxSpheres]; //Array of sphere colors
sSphere spheres[maxSpheres]; //Array of spheres

//initSphere: Set the values of a sphere object created
//Takes in a sphere object as a structure and sets its center, radius, and color
//according to the values passed into the function
//Increment number of spheres and add sphere data to appropriate array.
void initSphere(out sSphere sphere, in vec3 center, in float radius, in vec4 color)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;
    sphere.color = color;
    sphereColor[numSpheres] = sphere.color;
    spheres[numSpheres] = sphere;
    numSpheres++;
}

// Function to detect if a sphere was hit by a ray.
// Function finds inside of sphere radius using a ray's direction.
// Function returns a boolean to determine if a sphere was hit or not.
bool hit(in sSphere sphere, in vec4 rayDirection)
{
	vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy), 
        rSq = sphere.radius * sphere.radius;
    return lSq <= rSq;
}

//Helper functions
//x^2
float sq(float x) {
	return x * x;
}

//x^2^2^2^2^2
float sq_5(float x) {
	return sq(sq(sq(sq(sq(x)))));
}

//NOISE FUNCTION
//Essentially a random number generating.
//Works by using a noise texture and a preset graph function
// to return a red value of the color of the texure at a certain point.
float noise(in float seed) {
	float normalizedSeed = sin(sq(mod(time, 100.0) * seed)); //makes this graph https://www.desmos.com/calculator/wc7okcgjjb
	vec4 noiseCoord = texture(uNoise, vec2(normalizedSeed, -normalizedSeed)); //gets the color from noise.jpg
	
	
	return noiseCoord.r; //returns the red value as a float
}

//-------------------------------------------------------------------------------------
//LIGHT CALCULATIONS
/*
Phong Reflectance calculation
Use diffuse, specular, and ambient lighting to calculate rays bounced off a surface
Adds a specular highlight to emphasize light source.
Outputs light as final color.
*/
void lightCalc(out float diffuseIntensity, out float specularIntensity, in vec4 direction, 
				in float intensity, in vec4 position, in vec4 camera, in vec3 normal){
	//specularIntensity calculation
	vec4 halfwayVector = normalize(direction - camera);

	float specularCoefficient = max(0.0, dot(vec4(normal, 1.0), vec4(halfwayVector.xyz, 0.0)));
	
	specularIntensity = sq_5(sq_5(specularCoefficient)); //focuses the highlight
	
	//diffuseIntensity calculation
	float dist = length(direction);
	
	float diffuseCoefficient = max(0.0, dot(vec4(normal, 1.0), direction)); //max stops it from being negative

	float attenuatedIntensity = 1.0 / (1.0 + dist / intensity + sq(dist) / sq(intensity));
	
	diffuseIntensity = diffuseCoefficient * attenuatedIntensity;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
// This function calculates the output color using ray tracing tools
// 100 spheres are drawn and are colored and placed according to randomness generated by the noise function.
// The spheres are also given movement by the noise function to simulate a fire effect.
// A default gradient blend is used as the background color.
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // SCENE
    //Declare a sphere and define its components
    sSphere sphere;
    
	
	//Check for flame color.
	if(pressed.z == 0.0)
	{
	    for(int j = -maxSpheres; j < 0; j++)
    	{
    		float i = float(j);
    		initSphere(sphere, vec3(tan(i) * 0.3 + 0.1, sq(noise(i)) - 0.9, 0.0), 0.1, vec4(pressed.y, abs(noise(i)), pressed.x, 1.0));
    	}
    }
    else
    {
    	for(int j = -maxSpheres; j < 0; j++)
    	{
    		float i = float(j);
    		initSphere(sphere, vec3(tan(i) * 0.3 + 0.1, sq(noise(i)) - 0.9, 0.0), 0.1, vec4(1.0, abs(noise(i)), 0.0, 1.0));
    	}
    }
	
    bool hitSphere;
	
    for(int i = 0; i < numSpheres; i++) //Check for if sphere was hit.
    {
    	hitSphere = hit(spheres[i], rayDirection);
    	if(hitSphere)
    	{
			return sphereColor[i];
    	}
    }
    
    
    sSphere sphereTwo;
    initSphere(sphereTwo, vec3(0.0, 0.5, 0.0), 1.0, vec4(1.0, 1.0, 1.0, 1.0));
    
    vec3 dp;
    dp.xy = rayDirection.xy - sphereTwo.center.xy;
    float lSq = lenSq(dp.xy), 
        rSq = sphereTwo.radius * sphereTwo.radius;
        
    dp.z = rSq - lSq;
    
    vec3 position = sphereTwo.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
    
    vec3 normal = (position - sphereTwo.center.xyz) / sphereTwo.radius;
    
    //Light setup for background lighting
	float diffuseIntensity[10], specularIntensity[10];
	lightCalc(diffuseIntensity[0], specularIntensity[0], vLightDirection[0], vIntensity[0], vPosition, vec4(0.0), normal); //camera is 0,0,0 in view-space
	lightCalc(diffuseIntensity[1], specularIntensity[1], vLightDirection[1], vIntensity[1], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[2], specularIntensity[2], vLightDirection[2], vIntensity[2], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[3], specularIntensity[3], vLightDirection[3], vIntensity[3], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[4], specularIntensity[4], vLightDirection[4], vIntensity[4], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[5], specularIntensity[5], vLightDirection[5], vIntensity[5], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[6], specularIntensity[6], vLightDirection[6], vIntensity[6], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[7], specularIntensity[7], vLightDirection[7], vIntensity[7], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[8], specularIntensity[8], vLightDirection[8], vIntensity[8], vPosition, vec4(0.0), normal);
	lightCalc(diffuseIntensity[9], specularIntensity[9], vLightDirection[9], vIntensity[9], vPosition, vec4(0.0), normal);
	
	sphereTwo.color = 0.6 * sphereTwo.color; //0.6 is ambient light
	sphereTwo.color += (diffuseIntensity[0] * vec4(1.0) + specularIntensity[0] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[1] * vec4(1.0) + specularIntensity[1] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[2] * vec4(1.0) + specularIntensity[2] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[3] * vec4(1.0) + specularIntensity[3] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[4] * vec4(1.0) + specularIntensity[4] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[5] * vec4(1.0) + specularIntensity[5] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[6] * vec4(1.0) + specularIntensity[6] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[7] * vec4(1.0) + specularIntensity[7] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[8] * vec4(1.0) + specularIntensity[8] * vec4(1.0));
	sphereTwo.color += (diffuseIntensity[9] * vec4(1.0) + specularIntensity[9] * vec4(1.0));
	
    
    if(lSq <= rSq)
    {
    	return sphereTwo.color;
    }
    
	
	// Background gradient
	const vec3 colorOne = vec3(0.8, 0.6, 0.0), colorTwo = vec3(0.1, 0.3, 0.7);
	return vec4(mix(colorOne, colorTwo, rayDirection.y), 1.0);
}

void main()
{  
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
    
    vec4 posNDC = vPosClip / vPosClip.w;
    vec4 posScreen = posNDC * 0.5 + 0.5;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    rtFragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             gl_FragCoord.xy, uResolution);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    rtFragColor += calcColor(rayDirection, rayOrigin);
}